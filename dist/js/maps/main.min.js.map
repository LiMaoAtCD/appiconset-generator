{"version":3,"sources":["main.js"],"names":["app","BrowserWindow","TouchBar","ipcMain","require","TouchBarLabel","TouchBarButton","TouchBarSpacer","url","path","fs","sharp","dialog","Store","util","loadJSON","win","tempString","touchBar","appIdentifier","getName","toLowerCase","replace","tempDir","getPath","buttons","store","defaults","windowBounds","x","y","iconType","interpolation","savePath","createWindow","width","height","get","saveWindowBounds","set","getBounds","show","titleBarStyle","transparent","frame","resizable","maximizable","fullscreen","icon","join","__dirname","setSheetOffset","loadURL","format","pathname","protocol","slashes","once","empty","on","quit","emptyDir","err","console","error","saveIconsetToPath","message","showSaveDialog","defaultPath","buttonLabel","filename","copy","info","showOpenDialog","filters","name","extensions","properties","webContents","send","event","type","push","label","backgroundColor","click","size","setTouchBar","showMessageBox","detail","data","buffer","Buffer","from","Date","now","ensureDir","writeFile","emptyDirSync","image","Contents","images","version","author","then","json","iconlist","item","actualPixels","scale","includes","resize","kernel","fit","position","toFile","idiom","writeJson","spaces"],"mappings":"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","file":"../main.min.js","sourcesContent":["'use strict'\n\nconst { app, BrowserWindow, TouchBar, ipcMain } = require( 'electron' )\nconst { TouchBarLabel, TouchBarButton, TouchBarSpacer } = TouchBar\n\nconst url \t\t= require( 'url' ) \nconst path \t\t= require( 'path' )\nconst fs \t\t= require( 'fs-extra' )\nconst sharp \t= require( 'electron-sharp' )\nconst dialog \t= require( 'electron' ).dialog\nconst Store \t= require( 'electron-store' )\nconst util \t\t= require( 'util' )\nconst loadJSON \t= require( 'load-json-file' )\n\nlet win,\n\ttempString,\n\tappIdentifier = 'com.midwinter-dg.' + app.getName().toLowerCase().replace(' ', '-'),\n\ttempDir = app.getPath( 'temp' ) + `${appIdentifier}/`,\n\ttouchBar,\n\tbuttons = []\n\n\n\nlet store = new Store({\n\tdefaults: {\n\t\t\n\t\twindowBounds: {\n\t\t\tx: 0,\n\t\t\ty: 0\n\t\t},\n\t\t\n\t\ticonType: \t\t'macOS',\n\t\tinterpolation: 'lanczos3',\n\t\tsavePath: \t\tapp.getPath( 'desktop' )\n\t}\n})\n\n\n\nfunction createWindow() {\n\t\n\tlet { x, y, width, height } = store.get('windowBounds')\n\t\n\twin = new BrowserWindow({\n\t\tshow: false,\n\t\ttitleBarStyle: 'hiddenInset',\n\t\tx: x,\n\t\ty: y,\n\t\twidth: 820,\n\t\theight: 620,\n\t\ttransparent: true,\n\t\tframe: false,\n\t\tresizable: false,\n\t\tmaximizable: false,\n\t\tfullscreen: false,\n\t\ticon: path.join(__dirname, '../assets/icon/Icon.icns')\n\t})\n\t\n\twin.setSheetOffset( 32 )\n\t\n\tfunction saveWindowBounds() {\n\t\t\n\t\tstore.set( 'windowBounds', win.getBounds() )\n\t}\n\t\n\twin.loadURL(url.format ({ \n\t\t\n\t\tpathname: path.join(__dirname, '../html/app.html'), \n\t\tprotocol: 'file:', \n\t\tslashes: true \n\t}))\n\t\n\twin.once('ready-to-show', () => {\n\t\t\n\t\twin.show()\n\t\tempty()\n\t})\n\t\n\twin.on( 'resize', saveWindowBounds )\n\twin.on( 'move', saveWindowBounds )\n\t\n\twin.on('closed', () => {\n\t\t\n\t\tapp.quit()\n\t\tempty()\n\t})\n\t\n\trequire( './menu-app.min' )\n\t\n}\n\n\napp.on( 'ready', createWindow )\n\n\nfunction empty() {\n\t\n\tfs.emptyDir( tempDir, err => {\n\t\t\n\t\tif( err ) {\n\t\t\t\n\t\t\treturn console.error( err )\n\t\t}\n\t})\n}\n\napp.on( 'open', ( message ) => {\n\t\n\tdialog.showOpenDialog(win, {\n\t\t\t\n\t\t\tdefaultPath: app.getPath('home'),\n\t\t\tbuttonLabel: 'Choose Image',\n\t\t\tfilters: [\n\t\t\t\t{ name: 'Images', extensions: ['png', 'jpg', 'gif', 'bmp'] },\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t'openFile'\n\t\t\t],\n\t\t\tmessage: 'The file must be one of the following types: .png, .jpg, .gif, .bmp'\n\t\t},\t\t\n\t\t\n\t\tloadImage\n\t)\n\t\n\t\n\tfunction loadImage( filename ) {\n\t\t\n\t\tif( filename ) {\n\t\t\t\n\t\t\twin.webContents.send( 'load', filename )\n\t\t}\n\t}\n})\n\n\n\nipcMain.on( 'touchbar', ( event, message ) => {\n\t\n\tfor ( let type of message ) {\n\t\n\t\tbuttons.push(\n\t\t\t\n\t\t\tnew TouchBarButton({\n\t\t\t\n\t\t\t\tlabel: type,\n\t\t\t\tbackgroundColor: '#7F37C5',\n\t\t\t\tclick: () => {\n\t\t\t\t\n\t\t\t\t\twin.webContents.send( 'touch', type )\n\t\t\t\t}\n\t\t\t})\n\t\t)\n\t}\n\t\n\tbuttons.push(\n\t\t\n\t\tnew TouchBarSpacer({ size: 'small' })\n\t)\n\t\n\t\n\tbuttons.push(\n\t\n\t\tnew TouchBarButton({\n\t\t\t\n\t\t\tlabel: 'Generate Appiconset',\n\t\t\tbackgroundColor: '#3B88FD',\n\t\t\tclick: () => {\n\t\t\t\t\n\t\t\t\twin.webContents.send('menu-generate', 'generate')\n\t\t\t}\n\t\t})\n\t)\n\t\n\ttouchBar = new TouchBar( buttons )\n\t\n\twin.setTouchBar( touchBar )\n})\n\n\nipcMain.on( 'size', ( event, message ) => {\n\t\n\tdialog.showMessageBox( win, {\n\t\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\t\tmessage: `Image too small`,\n\t\t\t\t\t\t\tdetail: `For best results the image must be at least\\n1024 x 1024px`,\n\t\t\t\t\t\t\tbuttons: ['OK']\n\t\t\t\t\t\t})\n})\n\n\n\nipcMain.on( 'valid', ( event, message ) => {\n\t\n\tlet data \t= message.replace(/^data:image\\/\\w+;base64,/, ''),\n\t\tbuffer \t= Buffer.from(data, 'base64')\n\t\t\n\ttempString = Date.now()\n\t\n\tfs.ensureDir( `${tempDir}/${tempString}/`, err => {\n\t\t\n\t\tif( err ) {\n\t\t\t\n\t\t\treturn console.error( err )\n\t\t}\n\t\t\n\t\tfs.writeFile( `${tempDir}/${tempString}.png`, buffer, function( err ) {\n\t\t\t\n\t\t\tif( err ) {\n\t\t\t\t\n\t\t\t\treturn console.error( err )\n\t\t\t}\n\t\t\t\n\t\t\twin.webContents.send( 'preview', `${tempDir}/${tempString}.png` )\n\t\t})\t\n\t})\n})\n\n\n\nipcMain.on( 'invalid', ( event, message ) => {\n\t\n\tdialog.showMessageBox( win, {\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tmessage: `Invalid file format`,\n\t\t\t\t\t\t\tdetail: `${message} is not a valid image file.\\nThe file must be one of the following types: .png, .jpg, .gif, .bmp`,\n\t\t\t\t\t\t\tbuttons: ['OK']\n\t\t\t\t\t\t})\n})\n\n\n\nipcMain.on( 'generate', ( event, message ) => {\n\t\n\tfs.emptyDirSync( `${tempDir}/${tempString}/` )\n\t\n\tlet interpolation = store.get( 'interpolation' ),\n\timage = sharp( `${tempDir}/${tempString}.png` ),\n\tContents = {\n\t\t\t\t\t\"images\" : [],\n\t\t\t\t\t\"info\" : {\n\t\t\t\t\t\t\"version\" : 1,\n\t\t\t\t\t\t\"author\" : appIdentifier\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\tloadJSON( path.join(__dirname, '../json/iconsets.json') ).then(json => {\n\t\t\n\t\tlet iconlist = []\n\t\t\n\t\tfor( let item of json[message] ) {\n\t\t\t\n\t\t\tlet actualPixels = item.size * item.scale,\n\t\t\t\tfilename = `icon_${item.size}x${item.size}@${item.scale}x.png`\n\t\t\t\n\t\t\tif ( iconlist.includes( filename ) === false ) {\n\t\t\t\t\n\t\t\t\ticonlist.push( filename )\n\t\t\t\t\n\t\t\t\timage\n\t\t\t\t\t.resize(actualPixels, actualPixels, {\n\t\t\t\t\tkernel: sharp['kernel'][interpolation],\n\t\t\t\t\tfit: 'contain',\n\t\t\t\t\tposition: 'left top'\n\t\t\t\t})\n\t\t\t\t.toFile( `${tempDir}/${tempString}/${filename}` )\n\t\t\t\t.then(() => {\n\t\t\t\t\t\n\t\t\t\t\tconsole.info( `generated ${item.size} - @${item.scale}x` )\n\t\t\t\t})\n\t\n\t\n\t\t\t\tContents.images.push({\n\t\t\t\t\t\t\"size\" : `${item.size}x${item.size}`,\n\t\t\t\t\t\t\"idiom\" : item.idiom,\n\t\t\t\t\t\t\"filename\" : filename,\n\t\t\t\t\t\t\"scale\" : `${item.scale}x`\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\t\n\t\tfs.writeJson( `${tempDir}/${tempString}/Contents.json`, Contents, {\n\t\t\t\tspaces: '\\t'\n\t\t\t}, \n\t\t\t\n\t\t\tfunction( err ) {\n\t\t\t\n\t\t\tif ( err ) return console.error( err )\n\t\t\t\n\t\t\tsaveIconsetToPath( `${tempDir}/${tempString}` )\n\t\t})\n\t})\n})\n\n\n\nfunction saveIconsetToPath( message ) {\n\t\n\tlet savePath =  store.get( 'savePath' )\n\t\n\tdialog.showSaveDialog( win, {\n\t\t\t\n\t\t\tdefaultPath: savePath + '/AppIcon.appiconset',\n\t\t\tbuttonLabel: 'Save Appiconset'\n\t\t},\t\t\n\t\t\n\t\tfunction( filename ) {\n\t\t\t\n\t\t\tif( filename ) {\n\t\t\t\n\t\t\t\tfs.copy( message, filename, err => {\n\t\t\t\t\t\n\t\t\t\t\tif ( err ) return console.error( err )\n\t\t\t\t\t\n\t\t\t\t\tconsole.info( 'success!' )\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t)\n}\n"]}