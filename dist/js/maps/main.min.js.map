{"version":3,"sources":["main.js"],"names":["app","BrowserWindow","TouchBar","ipcMain","require","TouchBarButton","TouchBarSpacer","TouchBarSegmentedControl","url","path","fs","sharp","dialog","Store","util","loadJSON","win","modal","tempString","touchBar1","touchBar2","prefsTouchBar","group","groupPrefs","appIdentifier","getName","toLowerCase","replace","tempDir","getPath","buttons","generate","prefsButtons","store","defaults","windowBounds","x","y","iconType","interpolation","savePath","createWindow","width","height","get","saveWindowBounds","set","getBounds","show","titleBarStyle","transparent","frame","resizable","maximizable","fullscreen","icon","join","__dirname","setSheetOffset","loadURL","format","pathname","protocol","slashes","once","empty","on","quit","emptyDir","err","console","error","saveIconsetToPath","message","showSaveDialog","defaultPath","buttonLabel","filename","copy","info","showOpenDialog","filters","name","extensions","properties","webContents","send","event","spacer","segments","count","selected","item","push","label","type","state","size","segmentStyle","mode","selectedIndex","change","backgroundColor","click","setTouchBar","showMessageBox","detail","data","buffer","Buffer","from","Date","now","ensureDir","writeFile","emptyDirSync","image","Contents","images","version","author","then","json","iconlist","actualPixels","scale","includes","resize","kernel","fit","position","toFile","idiom","writeJson","spaces","ind","close","parent","minWidth","maxWidth","minHeight","webPreferences","devTools","parseInt"],"mappings":"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","file":"../main.min.js","sourcesContent":["'use strict'\n\nconst { app, BrowserWindow, TouchBar, ipcMain } = require( 'electron' )\nconst { TouchBarButton, TouchBarSpacer, TouchBarSegmentedControl } = TouchBar\n\nconst url \t\t= require( 'url' ) \nconst path \t\t= require( 'path' )\nconst fs \t\t= require( 'fs-extra' )\nconst sharp \t\t= require( 'electron-sharp' )\nconst dialog \t= require( 'electron' ).dialog\nconst Store \t\t= require( 'electron-store' )\nconst util \t\t= require( 'util' )\nconst loadJSON \t= require( 'load-json-file' )\n\n\n\nlet win,\n\tmodal,\n\ttempString,\n\tappIdentifier = 'com.midwinter-dg.' + app.getName().toLowerCase().replace(' ', '-'),\n\ttempDir = app.getPath( 'temp' ) + `${appIdentifier}/`,\n\ttouchBar1,\n\ttouchBar2,\n\tprefsTouchBar,\n\tgroup,\n\tgroupPrefs,\n\tbuttons = [],\n\tgenerate = [],\n\tprefsButtons = []\n\n\n\nlet store = new Store({\n\tdefaults: {\n\t\t\n\t\twindowBounds: {\n\t\t\tx: 0,\n\t\t\ty: 0\n\t\t},\n\t\t\n\t\ticonType: \t\t0,\n\t\tinterpolation: \t'lanczos3',\n\t\tsavePath: \t\tapp.getPath( 'desktop' )\n\t}\n})\n\n\n\nfunction createWindow() {\n\t\n\tlet { x, y, width, height } = store.get('windowBounds')\n\t\n\twin = new BrowserWindow({\n\t\tshow: false,\n\t\ttitleBarStyle: 'hiddenInset',\n\t\tx: x,\n\t\ty: y,\n\t\twidth: 820,\n\t\theight: 620,\n\t\ttransparent: true,\n\t\tframe: false,\n\t\tresizable: false,\n\t\tmaximizable: false,\n\t\tfullscreen: false,\n\t\ticon: path.join(__dirname, '../assets/icon/Icon.icns')\n\t})\n\t\n\twin.setSheetOffset( 32 )\n\t\n\tfunction saveWindowBounds() {\n\t\t\n\t\tstore.set( 'windowBounds', win.getBounds() )\n\t}\n\t\n\twin.loadURL(url.format ({ \n\t\t\n\t\tpathname: path.join(__dirname, '../html/app.html'), \n\t\tprotocol: 'file:', \n\t\tslashes: true \n\t}))\n\t\n\twin.once('ready-to-show', () => {\n\t\t\n\t\twin.show()\n\t\tempty()\n\t})\n\t\n\twin.on( 'resize', saveWindowBounds )\n\twin.on( 'move', saveWindowBounds )\n\t\n\twin.on('closed', () => {\n\t\t\n\t\tapp.quit()\n\t\tempty()\n\t})\n\t\n\trequire( './menu-app.min' )\n\t\n}\n\napp.on( 'ready', createWindow )\n\n\n\nfunction empty() {\n\t\n\tfs.emptyDir( tempDir, err => {\n\t\t\n\t\tif( err ) {\n\t\t\t\n\t\t\treturn console.error( err )\n\t\t}\n\t})\n}\n\n\n\napp.on( 'open', ( message ) => {\n\t\n\tdialog.showOpenDialog(win, {\n\t\t\t\n\t\t\tdefaultPath: app.getPath('home'),\n\t\t\tbuttonLabel: 'Choose Image',\n\t\t\tfilters: [\n\t\t\t\t{ name: 'Images', extensions: ['png', 'jpg', 'gif', 'bmp'] },\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t'openFile'\n\t\t\t],\n\t\t\tmessage: 'The file must be one of the following types: .png, .jpg, .gif, .bmp'\n\t\t},\t\t\n\t\t\n\t\tloadImage\n\t)\n\t\n\t\n\tfunction loadImage( filename ) {\n\t\t\n\t\tif( filename ) {\n\t\t\t\n\t\t\twin.webContents.send( 'load', filename )\n\t\t}\n\t}\n})\n\n\n\nipcMain.on( 'touchbar', ( event, message ) => {\n\t\n\tlet segments = [],\n\t\tspacer,\n\t\tcount = 0,\n\t\tselected = 0\n\t\n\tfor ( let item of message ) {\n\t\t\n\t\tsegments.push({ label: item.type })\n\t\t\n\t\tif( item.state ) selected = count\n\t\t\n\t\tcount++\n\t}\n\t\n\tspacer \t= new TouchBarSpacer({ size: 'small' })\n\tgroup \t= new TouchBarSegmentedControl({\n\t\t\n\t\tsegmentStyle: 'separated',\n\t\tmode: 'single',\n\t\tsegments: segments,\n\t\tselectedIndex: selected,\n\t\tchange: ( selectedIndex ) => {\n\t\t\t\n\t\t\twin.webContents.send( 'touchbar-select', selectedIndex )\n\t\t}\n\t})\n\t\n\tbuttons.push( group )\n\tgenerate.push( group )\n\tbuttons.push( spacer )\n\tgenerate.push( spacer )\n\t\n\tgenerate.push(\n\t\n\t\tnew TouchBarButton({\n\t\t\t\n\t\t\tlabel: 'Generate Appiconset',\n\t\t\tbackgroundColor: '#3B88FD',\n\t\t\tclick: () => {\n\t\t\t\t\n\t\t\t\twin.webContents.send( 'menu-generate', 'generate' )\n\t\t\t}\n\t\t})\n\t)\n\t\n\ttouchBar1 = new TouchBar( buttons )\n\twin.setTouchBar( touchBar1 )\n})\n\n\nipcMain.on( 'touchbar-index', ( event, message ) => {\n\t\n\tgroup.selectedIndex = message\n})\n\n\n\nipcMain.on( 'size', ( event, message ) => {\n\t\n\tdialog.showMessageBox( win, {\n\t\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\t\tmessage: `Image too small`,\n\t\t\t\t\t\t\tdetail: `For best results the image must be at least\\n1024 x 1024px`,\n\t\t\t\t\t\t\tbuttons: ['OK']\n\t\t\t\t\t\t})\n})\n\n\n\nipcMain.on( 'valid', ( event, message ) => {\n\t\n\tlet data \t= message.replace(/^data:image\\/\\w+;base64,/, ''),\n\t\tbuffer \t= Buffer.from(data, 'base64')\n\t\t\n\ttempString = Date.now()\n\t\n\tfs.ensureDir( `${tempDir}/${tempString}/`, err => {\n\t\t\n\t\tif( err ) {\n\t\t\t\n\t\t\treturn console.error( err )\n\t\t}\n\t\t\n\t\tfs.writeFile( `${tempDir}/${tempString}.png`, buffer, function( err ) {\n\t\t\t\n\t\t\tif( err ) {\n\t\t\t\t\n\t\t\t\treturn console.error( err )\n\t\t\t}\n\t\t\t\n\t\t\twin.webContents.send( 'preview', `${tempDir}/${tempString}.png` )\n\t\t\t\n\t\t\ttouchBar2 = new TouchBar( generate )\n\t\t\twin.setTouchBar( touchBar2 )\n\t\t})\t\n\t})\n})\n\n\n\nipcMain.on( 'invalid', ( event, message ) => {\n\t\n\tdialog.showMessageBox( win, {\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tmessage: `Invalid file format`,\n\t\t\t\t\t\t\tdetail: `${message} is not a valid image file.\\nThe file must be one of the following types: .png, .jpg, .gif, .bmp`,\n\t\t\t\t\t\t\tbuttons: ['OK']\n\t\t\t\t\t\t})\n})\n\n\n\nipcMain.on( 'generate', ( event, message ) => {\n\t\n\tfs.emptyDirSync( `${tempDir}/${tempString}/` )\n\t\n\tlet interpolation = store.get( 'interpolation' ),\n\timage = sharp( `${tempDir}/${tempString}.png` ),\n\tContents = {\n\t\t\t\t\t\"images\" : [],\n\t\t\t\t\t\"info\" : {\n\t\t\t\t\t\t\"version\" : 1,\n\t\t\t\t\t\t\"author\" : appIdentifier\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\tloadJSON( path.join(__dirname, '../json/iconsets.json') ).then(json => {\n\t\t\n\t\tlet iconlist = []\n\t\t\n\t\tfor( let item of json[message] ) {\n\t\t\t\n\t\t\tlet actualPixels = item.size * item.scale,\n\t\t\t\tfilename = `icon_${item.size}x${item.size}@${item.scale}x.png`\n\t\t\t\n\t\t\tif ( iconlist.includes( filename ) === false ) {\n\t\t\t\t\n\t\t\t\ticonlist.push( filename )\n\t\t\t\t\n\t\t\t\timage\n\t\t\t\t\t.resize(actualPixels, actualPixels, {\n\t\t\t\t\tkernel: sharp['kernel'][interpolation],\n\t\t\t\t\tfit: 'contain',\n\t\t\t\t\tposition: 'left top'\n\t\t\t\t})\n\t\t\t\t.toFile( `${tempDir}/${tempString}/${filename}` )\n\t\t\t\t.then(() => {\n\t\t\t\t\t\n\t\t\t\t\tconsole.info( `generated ${item.size} - @${item.scale}x` )\n\t\t\t\t})\n\t\n\t\n\t\t\t\tContents.images.push({\n\t\t\t\t\t\t\"size\" : `${item.size}x${item.size}`,\n\t\t\t\t\t\t\"idiom\" : item.idiom,\n\t\t\t\t\t\t\"filename\" : filename,\n\t\t\t\t\t\t\"scale\" : `${item.scale}x`\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\t\n\t\tfs.writeJson( `${tempDir}/${tempString}/Contents.json`, Contents, {\n\t\t\t\tspaces: '\\t'\n\t\t\t}, \n\t\t\t\n\t\t\tfunction( err ) {\n\t\t\t\n\t\t\tif ( err ) return console.error( err )\n\t\t\t\n\t\t\tsaveIconsetToPath( `${tempDir}/${tempString}` )\n\t\t})\n\t})\n})\n\n\n\nipcMain.on( 'deleted', ( event, message ) => {\n\t\n\ttouchBar1 = new TouchBar( buttons )\n\twin.setTouchBar( touchBar1 )\n})\n\n\n\nfunction saveIconsetToPath( message ) {\n\t\n\tlet savePath =  store.get( 'savePath' )\n\t\n\tdialog.showSaveDialog( win, {\n\t\t\t\n\t\t\tdefaultPath: savePath + '/AppIcon.appiconset',\n\t\t\tbuttonLabel: 'Save Appiconset'\n\t\t},\t\t\n\t\t\n\t\tfunction( filename ) {\n\t\t\t\n\t\t\tif( filename ) {\n\t\t\t\n\t\t\t\tfs.copy( message, filename, err => {\n\t\t\t\t\t\n\t\t\t\t\tif ( err ) return console.error( err )\n\t\t\t\t\t\n\t\t\t\t\tconsole.info( 'success!' )\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t)\n}\n\n\n\napp.on( 'open-prefs', (message) => {\n\t\n\tlet ind\n\t\n\tswitch( store.get( 'interpolation' ) ) {\n\t\t\n\t\tcase 'cubic': \t\tind = 1\n\t\tbreak;\n\t\t\n\t\tcase 'mitchell': \tind = 2\n\t\tbreak;\n\t\t\n\t\tcase 'lanczos2': \tind = 3\n\t\tbreak;\n\t\t\n\t\tcase 'lanczos3': \tind = 4\n\t\tbreak;\n\t\t\n\t\tdefault: \t\t\tind = 0\n\t}\n\t\n\tgroupPrefs = new TouchBarSegmentedControl({\n\t\n\t\tsegmentStyle: 'separated',\n\t\tmode: 'single',\n\t\tsegments: [\n\t\t\t{ label: 'Nearest Neighbour' },\n\t\t\t{ label: 'Cubic' },\n\t\t\t{ label: 'Mitchell' },\n\t\t\t{ label: 'Lanczos a=2' },\n\t\t\t{ label: 'Lanczos a=3' }\n\t\t],\n\t\tselectedIndex: ind,\n\t\tchange: ( selectedIndex ) => {\n\t\t\t\n\t\t\tmodal.webContents.send( 'prefs-select', selectedIndex )\n\t\t}\n\t})\n\t\n\tprefsButtons.push( groupPrefs )\n\t\n\tprefsButtons.push(\n\t\t\n\t\tnew TouchBarButton({\n\t\t\t\n\t\t\tlabel: 'Close',\n\t\t\tbackgroundColor: '#3B88FD',\n\t\t\tclick: () => {\n\t\t\t\t\n\t\t\t\tmodal.close()\n\t\t\t}\n\t\t})\n\t)\n\t\n\tprefsTouchBar = new TouchBar( prefsButtons )\n\t\n\tmodal = new BrowserWindow({\n\t\n\t\tparent: win,\n\t\tmodal: true,\n\t\twidth: 360,\n\t\tminWidth: 360,\n\t\tmaxWidth: 360,\n\t\theight: 230,\n\t\tminHeight: 230,\n\t\tresizable: false,\n\t\tshow: false,\n\t\tbackgroundColor: '#031320',\n\t\twebPreferences: { devTools: false }\n\t})\n\t\n\tmodal.loadURL(url.format ({ \n\t\t\n\t\tpathname: path.join(__dirname, '/../html/prefs.html'), \n\t\tprotocol: 'file:', \n\t\tslashes: true \n\t}))\n\t\n\tmodal.setTouchBar( prefsTouchBar )\n\t\n\tmodal.once('ready-to-show', () => {\n\t\t\n\t\tmodal.show()\n\t})\n})\n\n\n\nipcMain.on( 'prefs-change', ( event, message ) => {\n\t\n\tgroupPrefs.selectedIndex = parseInt(message)\n})\n"]}